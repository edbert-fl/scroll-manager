/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.openjfx.javafxplugin") version "0.1.0" // Use the latest version of the plugin
    jacoco
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testImplementation("org.mockito:mockito-core:5.6.0")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")
    implementation("org.openjfx:javafx-controls:21") // JavaFX controls
    implementation("org.openjfx:javafx-fxml:21")     // JavaFX FXML
    implementation("org.openjfx:javafx-web:21")

    // This dependency is used for SQLite database.
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation("org.xerial:sqlite-jdbc:3.43.0.0")

    // TestFX dependencies for JavaFX testing
    testImplementation("org.testfx:testfx-core:4.0.16-alpha")
    testImplementation("org.testfx:testfx-junit5:4.0.16-alpha")
    implementation("net.bytebuddy:byte-buddy-gradle-plugin:1.14.9")

    // This dependency is used for swing testing
    testImplementation("org.assertj:assertj-swing-junit:3.9.2")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

javafx {
    version = "21" // Set the desired JavaFX version
    modules = listOf("javafx.controls", "javafx.fxml", "javafx.graphics") // Add the required modules
}

sourceSets {
    main {
        resources.srcDirs("src/main/resources")
    }
}

application {
    // Define the main class for the application.
    mainClass.set("soft2412.a2.App")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.withType<JacocoReport> {
    dependsOn("test") // Tests are required to run before generating the report

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.map {
            fileTree(it).apply {
                exclude("**/*Controller*",
                        "**/*App.class")
            }
        }))
    }
}


tasks.processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // This line sets the strategy to include duplicates
}
